/* Copyright Microsoft */

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"time"

	v1alpha1 "github.com/microsoft/scylla/pkg/apis/core/v1alpha1"
	scheme "github.com/microsoft/scylla/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// OperationalConfigurationsGetter has a method to return a OperationalConfigurationInterface.
// A group's client should implement this interface.
type OperationalConfigurationsGetter interface {
	OperationalConfigurations(namespace string) OperationalConfigurationInterface
}

// OperationalConfigurationInterface has methods to work with OperationalConfiguration resources.
type OperationalConfigurationInterface interface {
	Create(*v1alpha1.OperationalConfiguration) (*v1alpha1.OperationalConfiguration, error)
	Update(*v1alpha1.OperationalConfiguration) (*v1alpha1.OperationalConfiguration, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.OperationalConfiguration, error)
	List(opts v1.ListOptions) (*v1alpha1.OperationalConfigurationList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.OperationalConfiguration, err error)
	OperationalConfigurationExpansion
}

// operationalConfigurations implements OperationalConfigurationInterface
type operationalConfigurations struct {
	client rest.Interface
	ns     string
}

// newOperationalConfigurations returns a OperationalConfigurations
func newOperationalConfigurations(c *CoreV1alpha1Client, namespace string) *operationalConfigurations {
	return &operationalConfigurations{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the operationalConfiguration, and returns the corresponding operationalConfiguration object, and an error if there is any.
func (c *operationalConfigurations) Get(name string, options v1.GetOptions) (result *v1alpha1.OperationalConfiguration, err error) {
	result = &v1alpha1.OperationalConfiguration{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of OperationalConfigurations that match those selectors.
func (c *operationalConfigurations) List(opts v1.ListOptions) (result *v1alpha1.OperationalConfigurationList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.OperationalConfigurationList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested operationalConfigurations.
func (c *operationalConfigurations) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a operationalConfiguration and creates it.  Returns the server's representation of the operationalConfiguration, and an error, if there is any.
func (c *operationalConfigurations) Create(operationalConfiguration *v1alpha1.OperationalConfiguration) (result *v1alpha1.OperationalConfiguration, err error) {
	result = &v1alpha1.OperationalConfiguration{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		Body(operationalConfiguration).
		Do().
		Into(result)
	return
}

// Update takes the representation of a operationalConfiguration and updates it. Returns the server's representation of the operationalConfiguration, and an error, if there is any.
func (c *operationalConfigurations) Update(operationalConfiguration *v1alpha1.OperationalConfiguration) (result *v1alpha1.OperationalConfiguration, err error) {
	result = &v1alpha1.OperationalConfiguration{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		Name(operationalConfiguration.Name).
		Body(operationalConfiguration).
		Do().
		Into(result)
	return
}

// Delete takes name of the operationalConfiguration and deletes it. Returns an error if one occurs.
func (c *operationalConfigurations) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *operationalConfigurations) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("operationalconfigurations").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched operationalConfiguration.
func (c *operationalConfigurations) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.OperationalConfiguration, err error) {
	result = &v1alpha1.OperationalConfiguration{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("operationalconfigurations").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
