/* Copyright Microsoft */

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/microsoft/scylla/pkg/apis/core/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OperationalConfigurationLister helps list OperationalConfigurations.
type OperationalConfigurationLister interface {
	// List lists all OperationalConfigurations in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.OperationalConfiguration, err error)
	// OperationalConfigurations returns an object that can list and get OperationalConfigurations.
	OperationalConfigurations(namespace string) OperationalConfigurationNamespaceLister
	OperationalConfigurationListerExpansion
}

// operationalConfigurationLister implements the OperationalConfigurationLister interface.
type operationalConfigurationLister struct {
	indexer cache.Indexer
}

// NewOperationalConfigurationLister returns a new OperationalConfigurationLister.
func NewOperationalConfigurationLister(indexer cache.Indexer) OperationalConfigurationLister {
	return &operationalConfigurationLister{indexer: indexer}
}

// List lists all OperationalConfigurations in the indexer.
func (s *operationalConfigurationLister) List(selector labels.Selector) (ret []*v1alpha1.OperationalConfiguration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OperationalConfiguration))
	})
	return ret, err
}

// OperationalConfigurations returns an object that can list and get OperationalConfigurations.
func (s *operationalConfigurationLister) OperationalConfigurations(namespace string) OperationalConfigurationNamespaceLister {
	return operationalConfigurationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OperationalConfigurationNamespaceLister helps list and get OperationalConfigurations.
type OperationalConfigurationNamespaceLister interface {
	// List lists all OperationalConfigurations in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.OperationalConfiguration, err error)
	// Get retrieves the OperationalConfiguration from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.OperationalConfiguration, error)
	OperationalConfigurationNamespaceListerExpansion
}

// operationalConfigurationNamespaceLister implements the OperationalConfigurationNamespaceLister
// interface.
type operationalConfigurationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OperationalConfigurations in the indexer for a given namespace.
func (s operationalConfigurationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.OperationalConfiguration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.OperationalConfiguration))
	})
	return ret, err
}

// Get retrieves the OperationalConfiguration from the indexer for a given namespace and name.
func (s operationalConfigurationNamespaceLister) Get(name string) (*v1alpha1.OperationalConfiguration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("operationalconfiguration"), name)
	}
	return obj.(*v1alpha1.OperationalConfiguration), nil
}
